{"ast":null,"code":"var _jsxFileName = \"/Users/daniele/Documents/GitHub/paroliere/src/components/board.js\";\nimport React, { Fragment } from 'react';\nimport Headers from './headers';\nimport Row from './row';\nconsole.log('1 Board');\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '5px',\n    border: '5px',\n    backgroundColor: '#a1887f',\n    color: '#efebe9',\n    //color: theme.palette.openTitle,\n    width: '63px',\n    height: '63px',\n    borderRadius: '5px',\n    display: 'table-cell',\n    verticalAlign: 'middle',\n    textAlign: 'center'\n  }\n}));\n\nfunction Board({\n  rolls,\n  colsNum\n}) {\n  console.log(`printing board with ${rolls.length} rolls in ${colsNum} columns`);\n  console.log('rolls length', rolls.length);\n  console.log('columns', colsNum);\n  let rows = [];\n  let rowRolls = [];\n  let rowCounter = 0;\n  let y = 0;\n\n  for (let [index, value] of rolls.entries()) {\n    console.log(rowCounter, index + 1, value);\n    rowRolls.push({\n      i: index + 1,\n      x: rowCounter + 1,\n      y: index + 1 + colsNum - colsNum * (rowCounter + 1),\n      content: value\n    });\n\n    if (rowRolls.length === colsNum) {\n      console.log(`pushing rowRolls row_${rowCounter} into the board `, rowRolls);\n      rows.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: rowCounter.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        key: rowCounter.toString(),\n        id: rowCounter + 1,\n        rowRolls: rowRolls,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 59\n        }\n      })));\n      rowRolls = [];\n      rowCounter++;\n    }\n  }\n\n  console.log('printing rows', rows);\n  return rows;\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/daniele/Documents/GitHub/paroliere/src/components/board.js"],"names":["React","Fragment","Headers","Row","console","log","useStyles","makeStyles","theme","root","margin","border","backgroundColor","color","width","height","borderRadius","display","verticalAlign","textAlign","Board","rolls","colsNum","length","rows","rowRolls","rowCounter","y","index","value","entries","push","i","x","content","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACAC,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEA,MAAMC,SAAS,GAAGC,UAAU,CAACC,KAAK,KAAI;AAClCC,EAAAA,IAAI,EAAC;AACDC,IAAAA,MAAM,EAAE,KADP;AAEDC,IAAAA,MAAM,EAAE,KAFP;AAGDC,IAAAA,eAAe,EAAE,SAHhB;AAIDC,IAAAA,KAAK,EAAE,SAJN;AAKD;AACAC,IAAAA,KAAK,EAAE,MANN;AAODC,IAAAA,MAAM,EAAE,MAPP;AAQDC,IAAAA,YAAY,EAAE,KARb;AASDC,IAAAA,OAAO,EAAE,YATR;AAUDC,IAAAA,aAAa,EAAE,QAVd;AAWDC,IAAAA,SAAS,EAAE;AAXV;AAD6B,CAAJ,CAAN,CAA5B;;AAeA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf,EAAmC;AAE/BlB,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBgB,KAAK,CAACE,MAAO,aAAYD,OAAQ,UAApE;AACAlB,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BgB,KAAK,CAACE,MAAlC;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBiB,OAAtB;AAEA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,CAAC,GAAC,CAAN;;AACA,OAAK,IAAI,CAACC,KAAD,EAAOC,KAAP,CAAT,IAA0BR,KAAK,CAACS,OAAN,EAA1B,EAA2C;AACvC1B,IAAAA,OAAO,CAACC,GAAR,CAAYqB,UAAZ,EAAwBE,KAAK,GAAC,CAA9B,EAAiCC,KAAjC;AAEIJ,IAAAA,QAAQ,CAACM,IAAT,CAAc;AACVC,MAAAA,CAAC,EAACJ,KAAK,GAAC,CADE;AAEVK,MAAAA,CAAC,EAACP,UAAU,GAAC,CAFH;AAGVC,MAAAA,CAAC,EAAEC,KAAK,GAAC,CAAN,GAAQN,OAAT,GAAmBA,OAAO,IAAEI,UAAU,GAAC,CAAb,CAHlB;AAIVQ,MAAAA,OAAO,EAAEL;AAJC,KAAd;;AAOC,QAAGJ,QAAQ,CAACF,MAAT,KAAoBD,OAAvB,EACD;AACIlB,MAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBqB,UAAW,kBAA/C,EAAiED,QAAjE;AACAD,MAAAA,IAAI,CAACO,IAAL,eAAU;AAAI,QAAA,GAAG,EAAEL,UAAU,CAACS,QAAX,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC,oBAAC,GAAD;AAAK,QAAA,GAAG,EAAET,UAAU,CAACS,QAAX,EAAV;AAAiC,QAAA,EAAE,EAAET,UAAU,GAAC,CAAhD;AAAmD,QAAA,QAAQ,EAAED,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhC,CAAV;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACAC,MAAAA,UAAU;AACb;AAEJ;;AACDtB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BmB,IAA5B;AACA,SAAOA,IAAP;AACP;;AACD,eAAeJ,KAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport Headers from './headers'\nimport Row from './row'\nconsole.log('1 Board')\n\nconst useStyles = makeStyles(theme =>({\n    root:{\n        margin: '5px',\n        border: '5px',\n        backgroundColor: '#a1887f',\n        color: '#efebe9',\n        //color: theme.palette.openTitle,\n        width: '63px',\n        height: '63px',\n        borderRadius: '5px',\n        display: 'table-cell',\n        verticalAlign: 'middle',\n        textAlign: 'center'\n    }\n}))\nfunction Board({ rolls, colsNum }) {\n\n    console.log(`printing board with ${rolls.length} rolls in ${colsNum} columns`)\n    console.log('rolls length', rolls.length)\n    console.log('columns',colsNum)\n\n    let rows = []\n    let rowRolls = []\n    let rowCounter = 0\n    let y=0\n    for (let [index,value] of rolls.entries()) {\n        console.log(rowCounter, index+1, value\n         )\n            rowRolls.push({\n                i:index+1,\n                x:rowCounter+1,\n                y:(index+1+colsNum)-(colsNum*(rowCounter+1)),\n                content: value\n            })\n\n             if(rowRolls.length === colsNum) \n            {   \n                console.log(`pushing rowRolls row_${rowCounter} into the board `,rowRolls)\n                rows.push(<tr key={rowCounter.toString()}><Row key={rowCounter.toString()} id={rowCounter+1} rowRolls={rowRolls}/></tr>)\n                rowRolls = []\n                rowCounter++\n            } \n           \n        }\n        console.log('printing rows',rows)\n        return rows\n}\nexport default Board"]},"metadata":{},"sourceType":"module"}