{"ast":null,"code":"var _jsxFileName = \"/Users/daniele/Documents/GitHub/paroliere/src/components/timer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Typography, Box } from '@material-ui/core';\nimport useSound from 'use-sound';\nimport gongMp3 from '../sounds/chinese-gong.mp3';\nimport dingMp3 from '../sounds/ding.mp3';\n\nconst Timer = ({\n  totalTime,\n  countDown,\n  toggleRollDiceBtn\n}) => {\n  const [seconds, setSeconds] = useState(totalTime);\n  const [isActive, setIsActive] = useState(false);\n  const [isResetDisabled, setResetDisabled] = useState(true);\n\n  function toggle() {\n    setIsActive(!isActive);\n    toggleRollDiceBtn();\n  }\n\n  function reset() {\n    setSeconds(totalTime);\n    setIsActive(false);\n  }\n\n  const [ding] = useSound(dingMp3); //const [gong] = useSound(gongMp3);\n\n  const [gong] = useSound(dingMp3);\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive && seconds > 0) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n\n      if (seconds === totalTime - totalTime / 2 || seconds <= countDown) {\n        ding();\n      }\n    } else if (seconds === 0) {\n      gong();\n    }\n\n    if (!isActive && seconds < totalTime) {\n      setResetDisabled(false);\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, seconds, isResetDisabled]);\n  return /*#__PURE__*/React.createElement(Box, {\n    padding: \"0px 5px\",\n    display: \"flexbox\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: `${isActive ? 'active' : 'inactive'}`,\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, isActive ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    disabled: isResetDisabled,\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, seconds, \"s\"));\n};\n\nexport default Timer;","map":{"version":3,"sources":["/Users/daniele/Documents/GitHub/paroliere/src/components/timer.js"],"names":["React","useState","useEffect","Button","Typography","Box","useSound","gongMp3","dingMp3","Timer","totalTime","countDown","toggleRollDiceBtn","seconds","setSeconds","isActive","setIsActive","isResetDisabled","setResetDisabled","toggle","reset","ding","gong","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Button, Typography, Box} from '@material-ui/core'\nimport useSound from 'use-sound';\nimport gongMp3 from  '../sounds/chinese-gong.mp3'\nimport dingMp3 from  '../sounds/ding.mp3'\n\n\n\nconst Timer = ({totalTime, countDown, toggleRollDiceBtn}) => {\n\n\n  const [seconds, setSeconds] = useState(totalTime);\n  const [isActive, setIsActive] = useState(false);\n  const [isResetDisabled, setResetDisabled] = useState(true)\n\n  function toggle() {\n    setIsActive(!isActive);\n    toggleRollDiceBtn()\n  }\n\n  function reset() {\n    setSeconds(totalTime);\n    setIsActive(false);\n  }\n\n  const [ding] = useSound(dingMp3);\n  //const [gong] = useSound(gongMp3);\n  const [gong] = useSound(dingMp3);\n\n\nuseEffect(() => {\n    let interval = null;\n\n    if (isActive && seconds >0) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds - 1)\n            }, 1000); \n    if (seconds === totalTime - totalTime/2 || seconds <= countDown)  \n        {\n            ding()\n        }\n    }\n    else if (seconds === 0){\n        gong()\n    }\n    if (!isActive && seconds<totalTime){\n      setResetDisabled(false)\n    }\n    return () => clearInterval(interval)\n  }, [isActive, seconds, isResetDisabled])\n\n\n  return (\n    <Box \n        padding=\"0px 5px\"\n        display=\"flexbox\" \n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n      >     \n        <Button variant='contained' color=\"secondary\" className={`${isActive ? 'active' : 'inactive'}`} onClick={toggle}>\n          {isActive ? 'Pause' : 'Play'}\n        </Button>\n        <Button \n          variant='contained' \n          color=\"secondary\"  \n          disabled={isResetDisabled}\n          onClick={reset}>\n          Reset\n        </Button>\n        <Typography variant='h4'>\n        {seconds}s\n        </Typography>\n    </Box>\n  );\n};\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}