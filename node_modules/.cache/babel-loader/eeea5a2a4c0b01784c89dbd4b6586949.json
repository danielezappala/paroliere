{"ast":null,"code":"var _jsxFileName = \"/Users/daniele/Documents/GitHub/paroliere/src/components/board.js\";\nimport React, { Fragment } from 'react';\nimport Headers from './headers';\nimport Die from './die';\nconsole.log('Board');\n\nfunction Board({\n  rolls,\n  colsNum\n}) {\n  console.log(`printing board with ${colsNum} columns`);\n  let content = [];\n  let rowRolls = [];\n\n  for (let roll in rolls) {\n    rowRolls.push(roll);\n\n    if (rowRolls.length = colsNum) {\n      rowRolls = [];\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        rowRolls: rowRolls,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 28\n        }\n      }));\n    }\n  }\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/daniele/Documents/GitHub/paroliere/src/components/board.js"],"names":["React","Fragment","Headers","Die","console","log","Board","rolls","colsNum","content","rowRolls","roll","push","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACAC,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf,EAAmC;AAE/BJ,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBG,OAAQ,UAA3C;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,IAAT,IAAiBJ,KAAjB,EAAwB;AAChBG,IAAAA,QAAQ,CAACE,IAAT,CAAcD,IAAd;;AACA,QAAGD,QAAQ,CAACG,MAAT,GAAkBL,OAArB,EACA;AACIE,MAAAA,QAAQ,GAAG,EAAX;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAI,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAEA,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAJ,CAAP;AACH;AACJ;AACR;;AAGD,eAAeJ,KAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport Headers from './headers'\nimport Die from './die'\nconsole.log('Board')\n\nfunction Board({ rolls, colsNum }) {\n\n    console.log(`printing board with ${colsNum} columns`)\n\n    let content = []\n    let rowRolls = []\n    for (let roll in rolls) {\n            rowRolls.push(roll)\n            if(rowRolls.length = colsNum) \n            {\n                rowRolls = []\n                return <tr><Row rowRolls={rowRolls} /></tr>\n            } \n        }\n}\n\n\nexport default Board"]},"metadata":{},"sourceType":"module"}