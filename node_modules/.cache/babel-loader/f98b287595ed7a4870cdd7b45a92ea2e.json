{"ast":null,"code":"var _jsxFileName = \"/Users/daniele/Documents/GitHub/paroliere/src/components/fullScreenDialog.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport GlobalState from \"../store/globalState\";\nimport Slider from '@material-ui/core/Slider';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return /*#__PURE__*/React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }));\n});\nexport default function FullScreenDialog(props) {\n  console.log('props ', props);\n  const classes = useStyles();\n  const {\n    globalState,\n    globalDispatch\n  } = useContext(GlobalState);\n  const [settingsDialogVisibility, setSettingsDialogVisibility] = React.useState(true);\n  useEffect(() => {}, []);\n\n  const valuetext = value => {\n    return `${value}`;\n  };\n\n  const changeRowsNum = (e, value) => {\n    if (value * globalState.colsNum > 25) {\n      alert('It is not possible set more than 25 dices ');\n      value = globalState.rowsNum;\n      console.log(globalState.rowsNum, value); //e.preventDefault()\n\n      return;\n    }\n\n    globalDispatch({\n      type: \"CHANGE_ROWSNUM\",\n      payload: value\n    });\n  };\n\n  const changeColsNum = (e, value) => {\n    if (value * globalState.rowsNum > 25) {\n      alert('It is not possible set more than 25 dices');\n      value = globalState.colsNum;\n      console.log(globalState.colsNum, value); //e.preventDefault()\n\n      return;\n    }\n\n    globalDispatch({\n      type: \"CHANGE_COLSNUM\",\n      payload: value\n    });\n  };\n\n  const saveChanges = (e, value) => {\n    alert('Changes is being saved');\n    globalDispatch({\n      type: \"CLOSE_SETTINGS\"\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    globalDispatch({\n      type: \"CLOSE_SETTINGS\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Open full-screen dialog\"), /*#__PURE__*/React.createElement(Dialog, {\n    open: settingsDialogVisibility,\n    onClose: props.onClose,\n    TransitionComponent: Transition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    className: classes.appBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    onClick: props.onClose,\n    \"aria-label\": \"close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Settings\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    key: '1',\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: \"Number of rows: \",\n    secondary: globalState.rowsNum,\n    onClick: () => globalDispatch({\n      type: \"DEC_ROWSNUM\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    key: \"slideRowsNum\",\n    defaultValue: globalState.rowsNum,\n    getAriaValueText: valuetext,\n    onChange: changeRowsNum,\n    \"aria-labelledby\": \"discrete-slider-small-steps\",\n    step: 1,\n    marks: true,\n    min: globalState.minRows,\n    max: globalState.maxRows,\n    valueLabelDisplay: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(ListItem, {\n    key: '2',\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: \"Number of columns: \",\n    secondary: globalState.colsNum,\n    onClick: () => globalDispatch({\n      type: \"DEC_COLSNUM\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    key: \"slideColsNum\",\n    defaultValue: globalState.rowsNum,\n    getAriaValueText: valuetext,\n    onChange: changeColsNum,\n    \"aria-labelledby\": \"discrete-slider-small-steps\",\n    step: 1,\n    marks: true,\n    min: globalState.minCols,\n    max: globalState.maxCols,\n    valueLabelDisplay: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    key: \"saveSettings\",\n    autoFocus: true,\n    color: \"inherit\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Save\")))));\n}","map":{"version":3,"sources":["/Users/daniele/Documents/GitHub/paroliere/src/components/fullScreenDialog.js"],"names":["React","useEffect","useState","useContext","makeStyles","Button","Dialog","ListItemText","ListItem","List","Divider","AppBar","Toolbar","IconButton","Typography","CloseIcon","Slide","GlobalState","Slider","FormControl","InputLabel","Input","FormHelperText","useStyles","theme","appBar","position","title","marginLeft","spacing","flex","Transition","forwardRef","props","ref","FullScreenDialog","console","log","classes","globalState","globalDispatch","settingsDialogVisibility","setSettingsDialogVisibility","valuetext","value","changeRowsNum","e","colsNum","alert","rowsNum","type","payload","changeColsNum","saveChanges","handleSubmit","preventDefault","onClose","minRows","maxRows","minCols","maxCols"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport GlobalState from \"../store/globalState\"\nimport Slider from '@material-ui/core/Slider';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Input from '@material-ui/core/Input'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog(props) {\n  console.log('props ', props)\n\n  const classes = useStyles();\n\n  const { globalState, globalDispatch } = useContext(GlobalState);\n  const [settingsDialogVisibility, setSettingsDialogVisibility] = React.useState(true)\n  \n  useEffect(() => {\n\n  }, []);\n\n  const valuetext = (value) => {\n    return `${value}`;\n  }\n  \n  const changeRowsNum = (e, value) => {\n    if (value * globalState.colsNum > 25) {\n      alert('It is not possible set more than 25 dices ')\n      value = globalState.rowsNum\n      console.log(globalState.rowsNum,value)\n      //e.preventDefault()\n      return \n    }\n\n    globalDispatch({\n      type: \"CHANGE_ROWSNUM\",\n      payload: value\n    })\n  }\n\n  const changeColsNum = (e, value) => {\n    if (value * globalState.rowsNum > 25) {\n      alert('It is not possible set more than 25 dices')\n      value = globalState.colsNum\n      console.log(globalState.colsNum, value)\n      //e.preventDefault()\n      return \n    }\n    globalDispatch({\n      type: \"CHANGE_COLSNUM\",\n      payload: value\n    })\n  }\n\n  const saveChanges = (e, value) => {\n    alert('Changes is being saved')\n    globalDispatch({ type: \"CLOSE_SETTINGS\" })\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    globalDispatch({ type: \"CLOSE_SETTINGS\" })\n  }\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\">\n        Open full-screen dialog\n      </Button>\n      <Dialog  \n              open={settingsDialogVisibility} \n              onClose={props.onClose} \n              TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={props.onClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Settings\n            </Typography>\n           \n          </Toolbar>\n        </AppBar>\n        <form  onSubmit={handleSubmit}>\n          <FormControl >\n          \n            <List>\n              {/*Object.keys(globalState).map(function(key)*/}\n\n              <ListItem key={'1'} button>\n                <ListItemText primary='Number of rows: ' secondary={globalState.rowsNum} onClick={() => globalDispatch({ type: \"DEC_ROWSNUM\" })} />\n\n                <Slider\n                  key=\"slideRowsNum\"\n                  defaultValue={globalState.rowsNum}\n                  getAriaValueText={valuetext}\n                  onChange={changeRowsNum}\n                  aria-labelledby=\"discrete-slider-small-steps\"\n                  step={1}\n                  marks\n                  min={globalState.minRows}\n                  max={globalState.maxRows}\n                  valueLabelDisplay=\"auto\"\n                />\n\n              </ListItem>\n              <Divider />\n              <ListItem key={'2'} button>\n                <ListItemText primary='Number of columns: ' secondary={globalState.colsNum} onClick={() => globalDispatch({ type: \"DEC_COLSNUM\" })} />\n                <Slider\n                  key=\"slideColsNum\"\n                  defaultValue={globalState.rowsNum}\n                  getAriaValueText={valuetext}\n                  onChange={changeColsNum}\n                  aria-labelledby=\"discrete-slider-small-steps\"\n                  step={1}\n                  marks\n                  min={globalState.minCols}\n                  max={globalState.maxCols}\n                  valueLabelDisplay=\"auto\"\n                />\n              </ListItem>\n              <Divider />\n            </List>\n            <Button key=\"saveSettings\" autoFocus color=\"inherit\" type=\"submit\">\n              Save\n            </Button>\n          </FormControl>\n        </form>\n      </Dialog>\n    </div >\n  )\n}\n"]},"metadata":{},"sourceType":"module"}