{"ast":null,"code":"var _jsxFileName = \"/Users/daniele/Documents/GitHub/paroliere/src/App.js\";\nimport React, { useCallback, useContext, useReducer, createContext, useEffect, useState } from 'react';\nimport './App.css';\nimport Board from './components/board';\nimport dice from './data';\nimport PrimarySearchAppBar from './components/myAppBar';\nimport { Paper, Button, ThemeProvider, Typography, InputBase } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport theme from './theme';\nimport Ui from './components/ui';\nimport GlobalState from './store/globalState';\nimport reducer from \"./store/reducer\"; //import <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n\nconst initialAppGlobalState = {\n  //isSettingsDialogOpen: false,\n  rowsNum: 5,\n  colsNum: 5,\n  minRows: 2,\n  minCols: 2,\n  maxRows: 6,\n  maxCols: 6,\n  rolls: [],\n  match: 0,\n  totalTime: 10,\n  countDown: 2\n};\n\nconst makeRollDices = () => {\n  console.log('makeRollDices'); //console.log('appState', appState)\n\n  let rowsNum = 5;\n  let colsNum = 5;\n\n  if (typeof globalState !== 'undefined') {\n    rowsNum = initialAppGlobalState.rowsNum;\n    colsNum = initialAppGlobalState.colsNum;\n  }\n\n  console.log('state rows and cols', rowsNum, colsNum);\n  console.log(rowsNum, colsNum);\n  let rolls = []; //clone whole diceStack\n\n  let diceStack = [...dice];\n\n  while (diceStack.length > dice.length - rowsNum * colsNum) {\n    let dieNumber = Math.floor(Math.random() * diceStack.length);\n    let dieFace = Math.floor(Math.random() * 6);\n    rolls.push(diceStack[dieNumber][dieFace]);\n    diceStack.splice(dieNumber, 1);\n    console.log('diceStack ', diceStack.length);\n    console.log('soglia ', dice.length - rowsNum * colsNum);\n  }\n\n  console.log('dice number', rolls.length);\n  console.log('rolls', rolls);\n  return rolls;\n}; //initialAppGlobalState.rolls = makeRollDices();\n//initialAppGlobalState.makeRollDices = makeRollDices;\n//const App = ({ children }) => {\n\n\nconst App = () => {\n  const [globalState, globalDispatch] = useReducer(reducer, initialAppGlobalState); //const [rolls, setRolls] = useState(initialAppGlobalState.rolls);\n\n  globalState.makeRollDices = makeRollDices;\n  return /*#__PURE__*/React.createElement(GlobalState.Provider, {\n    value: {\n      globalState,\n      globalDispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Ui, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/daniele/Documents/GitHub/paroliere/src/App.js"],"names":["React","useCallback","useContext","useReducer","createContext","useEffect","useState","Board","dice","PrimarySearchAppBar","Paper","Button","ThemeProvider","Typography","InputBase","withStyles","theme","Ui","GlobalState","reducer","initialAppGlobalState","rowsNum","colsNum","minRows","minCols","maxRows","maxCols","rolls","match","totalTime","countDown","makeRollDices","console","log","globalState","diceStack","length","dieNumber","Math","floor","random","dieFace","push","splice","App","globalDispatch"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useReducer, createContext, useEffect, useState } from 'react';\nimport './App.css';\nimport Board from './components/board'\nimport dice from './data'\nimport PrimarySearchAppBar from './components/myAppBar'\nimport { Paper, Button, ThemeProvider, Typography, InputBase } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles';\nimport theme from './theme';\nimport Ui from './components/ui'\nimport GlobalState from './store/globalState'; \nimport reducer from \"./store/reducer\"\n \n//import <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n\n\nconst initialAppGlobalState = {\n  //isSettingsDialogOpen: false,\n  rowsNum: 5,\n  colsNum: 5,\n  minRows: 2,\n  minCols: 2,\n  maxRows: 6,\n  maxCols: 6,\n  rolls: [],\n  match: 0,\n  totalTime: 10,\n  countDown: 2\n};\n\n\nconst makeRollDices = () => {\n  console.log('makeRollDices')\n  //console.log('appState', appState)\n  let rowsNum = 5\n  let colsNum = 5\n  if (typeof(globalState)!== 'undefined'){\n     rowsNum = initialAppGlobalState.rowsNum\n     colsNum = initialAppGlobalState.colsNum\n  }\n   \n  console.log('state rows and cols', rowsNum, colsNum)\n\n  console.log(rowsNum, colsNum)\n  let rolls = []\n  //clone whole diceStack\n  let diceStack = [...dice]\n  while (diceStack.length > dice.length - (rowsNum * colsNum)) {\n    let dieNumber = Math.floor(Math.random() * diceStack.length);\n    let dieFace = Math.floor(Math.random() * 6);\n    rolls.push(diceStack[dieNumber][dieFace])\n    diceStack.splice(dieNumber, 1)\n    console.log('diceStack ', diceStack.length)\n    console.log('soglia ', dice.length - (rowsNum * colsNum))\n  }\n  console.log('dice number', rolls.length)\n  console.log('rolls', rolls)\n  return rolls\n}\n\n//initialAppGlobalState.rolls = makeRollDices();\n//initialAppGlobalState.makeRollDices = makeRollDices;\n\n//const App = ({ children }) => {\n  const App = () => {\n    \n  const [globalState, globalDispatch] = useReducer(reducer, initialAppGlobalState)\n  //const [rolls, setRolls] = useState(initialAppGlobalState.rolls);\n  globalState.makeRollDices = makeRollDices\n\n  return (\n        <GlobalState.Provider value = {{globalState, globalDispatch}}>\n          <ThemeProvider theme={theme}>\n            <Ui/>\n          </ThemeProvider>\n        </GlobalState.Provider>\n      ) \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}