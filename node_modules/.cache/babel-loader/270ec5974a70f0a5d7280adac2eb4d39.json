{"ast":null,"code":"import { useReducer as e, useEffect as t, useRef as r, useState as o, useCallback as n } from \"react\";\n\nconst s = (e, t) => {\n  if (!e.includes(t)) throw new Error(`'${t}' not found. It must be provided in initialState as a property key.`);\n},\n      c = \"production\" !== process.env.NODE_ENV ? Symbol(\"UPDATE_STATE\") : Symbol(),\n      a = (a, l) => {\n  const u = Object.keys(l);\n  let i = l,\n      d = null;\n  const p = {};\n  u.forEach(e => {\n    p[e] = new Set();\n  });\n\n  const E = (e, t) => t.type === c ? t.r ? t.r(e) : t.e : a(e, t),\n        f = (e, t) => {\n    \"production\" !== process.env.NODE_ENV && s(u, e);\n\n    const r = r => {\n      return { ...r,\n        [e]: (o = r[e], n = t, \"function\" == typeof n ? n(o) : n)\n      };\n      var o, n;\n    };\n\n    if (d) d({\n      type: c,\n      r\n    });else {\n      i = r(i);\n      const t = i[e];\n      p[e].forEach(e => e(t));\n    }\n  },\n        S = (e, t) => {\n    u.forEach(r => {\n      const o = t[r];\n      e[r] !== o && p[r].forEach(e => e(o));\n    });\n  };\n\n  return {\n    useGlobalStateProvider: () => {\n      const [o, n] = e(E, i);\n      t(() => {\n        if (d) throw new Error(\"Only one global state provider is allowed\");\n        return d = n, n({\n          type: c,\n          e: i\n        }), () => {\n          d = null;\n        };\n      }, []);\n      const s = r(o);\n      S(s.current, o), s.current = o, t(() => {\n        i = o;\n      }, [o]);\n    },\n    useGlobalState: e => {\n      \"production\" !== process.env.NODE_ENV && s(u, e);\n      const [r, c] = o(i[e]);\n      return t(() => (p[e].add(c), c(i[e]), () => {\n        p[e].delete(c);\n      }), [e]), [r, n(t => f(e, t), [e])];\n    },\n    getGlobalState: e => (\"production\" !== process.env.NODE_ENV && s(u, e), i[e]),\n    setGlobalState: f,\n    getState: () => i,\n    setState: e => {\n      if (d) d({\n        type: c,\n        e\n      });else {\n        const t = i;\n        i = e, S(t, i);\n      }\n    },\n    dispatch: e => {\n      if (d) d(e);else {\n        const t = i;\n        i = a(i, e), S(t, i);\n      }\n      return e;\n    }\n  };\n},\n      l = e => a((e, t) => e, e),\n      u = (e, t = e(void 0, {\n  type: void 0\n}), r) => r ? r(u)(e, t) : a(e, t),\n      i = () => {\n  if (!window.__REDUX_DEVTOOLS_EXTENSION__) return e => e;\n\n  const {\n    before: e,\n    after: t\n  } = (() => {\n    let e, t;\n    return {\n      before: r => (o, n, s) => {\n        if (e = o, t = n, s) return s(r)(o, n);\n        const c = r(o, n);\n        return { ...c,\n          useGlobalState: e => {\n            const [t] = c.useGlobalState(e);\n            return [t, () => {\n              throw new Error(\"Update is not allowed when using DevTools\");\n            }];\n          }\n        };\n      },\n      after: r => (o, n, s) => {\n        if (s) return s(r)(o, n);\n        const c = r(e, t);\n        let a = { ...o(n, {\n            type: \"@@redux/INIT\"\n          }),\n          ...t\n        };\n        const l = [];\n        return { ...c,\n          getState: () => a,\n          dispatch: e => (a = o(a, e), c.setState(a.computedStates[a.currentStateIndex].state), l.forEach(e => e()), e),\n          subscribe: e => (l.push(e), () => {\n            const t = l.indexOf(e);\n            l.splice(t, 1);\n          })\n        };\n      }\n    };\n  })();\n\n  return ((...e) => e.reduce((e, t) => (...r) => e(t(...r))))(e, window.__REDUX_DEVTOOLS_EXTENSION__(), t);\n};\n\nexport { l as createGlobalState, u as createStore, i as reduxDevToolsExt };","map":{"version":3,"sources":["../src/createContainer.ts","../src/createGlobalState.ts","../src/createStore.ts","../src/devtools.ts"],"names":["oldValue","newValue","validateStateKey","keys","stateKey","includes","Error","UPDATE_STATE","process","env","NODE_ENV","Symbol","createContainer","reducer","initialState","Object","globalState","linkedDispatch","listeners","forEach","key","Set","patchedReducer","state","action","type","setGlobalState","update","updater","previousState","[object Object]","r","nextPartialState","listener","notifyListeners","prevState","nextState","dispatch","useReducer","useEffect","e","prevGlobalState","useRef","current","partialState","setPartialState","useState","add","delete","useCallback","u","nextGlobalState","useGlobalStateProvider","useGlobalState","getGlobalState","getState","setState","createGlobalState","_action","createStore","undefined","enhancer","fns","reduce","p","c","args","savedReducer","savedInitialState","store","value","devState","computedStates","currentStateIndex","f","push","index","indexOf","splice","subscribe","before","after","reduxDevToolsExt","window","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":"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","sourcesContent":["import {\n  Dispatch,\n  Reducer,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\n\n// utility functions\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n// constants\n\nconst UPDATE_STATE = (\n  process.env.NODE_ENV !== 'production' ? Symbol('UPDATE_STATE')\n  /* for production */ : Symbol()\n);\n\nconst PROP_UPDATER = 'r';\nconst PROP_STATE = 'e';\n\n// createContainer\n\nexport const createContainer = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State,\n) => {\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  let globalState = initialState;\n\n  type PA1 = { type: typeof UPDATE_STATE; [PROP_UPDATER]: (prev: State) => State };\n  type PA2 = { type: typeof UPDATE_STATE; [PROP_STATE]: State };\n  type PatchAction = PA1 | PA2;\n  let linkedDispatch: Dispatch<Action | PatchAction> | null = null;\n\n  const listeners = {} as {\n    [StateKey in StateKeys]: Set<Dispatch<SetStateAction<State[StateKey]>>>;\n  };\n  keys.forEach((key) => { listeners[key as StateKeys] = new Set(); });\n\n  const patchedReducer = (state: State, action: Action | PatchAction) => {\n    // how can it be typed more properly?\n    if ((action as { type: unknown }).type === UPDATE_STATE) {\n      return (action as { [PROP_UPDATER]: unknown })[PROP_UPDATER]\n        ? (action as PA1)[PROP_UPDATER](state)\n        : (action as PA2)[PROP_STATE];\n    }\n    return reducer(state, action as Action);\n  };\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (previousState: State): State => ({\n      ...previousState,\n      [stateKey]: updateValue(previousState[stateKey], update),\n    });\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_UPDATER]: updater });\n    } else {\n      globalState = updater(globalState);\n      const nextPartialState = globalState[stateKey];\n      listeners[stateKey].forEach((listener) => listener(nextPartialState));\n    }\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        listeners[key as StateKeys].forEach((listener) => listener(nextPartialState));\n      }\n    });\n  };\n\n  const useGlobalStateProvider = () => {\n    const [state, dispatch] = useReducer(patchedReducer, globalState);\n    useEffect(() => {\n      if (linkedDispatch) throw new Error('Only one global state provider is allowed');\n      linkedDispatch = dispatch;\n      // in case it's changed before this effect is handled\n      dispatch({ type: UPDATE_STATE, [PROP_STATE]: globalState });\n      const cleanup = () => {\n        linkedDispatch = null;\n      };\n      return cleanup;\n    }, []);\n    const prevGlobalState = useRef(state);\n    notifyListeners(prevGlobalState.current, state);\n    prevGlobalState.current = state;\n    useEffect(() => {\n      globalState = state;\n    }, [state]);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const [partialState, setPartialState] = useState(globalState[stateKey]);\n    useEffect(() => {\n      listeners[stateKey].add(setPartialState);\n      setPartialState(globalState[stateKey]); // in case it's changed before this effect is handled\n      const cleanup = () => {\n        listeners[stateKey].delete(setPartialState);\n      };\n      return cleanup;\n    }, [stateKey]);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return globalState[stateKey];\n  };\n\n  const getWholeState = () => globalState;\n\n  const setWholeState = (nextGlobalState: State) => {\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_STATE]: nextGlobalState });\n    } else {\n      const prevGlobalState = globalState;\n      globalState = nextGlobalState;\n      notifyListeners(prevGlobalState, globalState);\n    }\n  };\n\n  const dispatchAction = (action: Action) => {\n    if (linkedDispatch) {\n      linkedDispatch(action);\n    } else {\n      const prevGlobalState = globalState;\n      globalState = reducer(globalState, action);\n      notifyListeners(prevGlobalState, globalState);\n    }\n    return action;\n  };\n\n  return {\n    useGlobalStateProvider,\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    getState: getWholeState,\n    setState: setWholeState, // for devtools.js\n    dispatch: dispatchAction,\n  };\n};\n","import { createContainer } from './createContainer';\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getGlobalState'\n  | 'setGlobalState';\n\n/**\n * create a gloal state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const store = createContainer((state: State, _action: never) => state, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","import { Reducer } from 'react';\n\nimport { createContainer } from './createContainer';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getState'\n  | 'dispatch';\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const store = createContainer(reducer, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}